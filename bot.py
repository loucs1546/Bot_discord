import discord
from discord.ext import commands
import os
from dotenv import load_dotenv
import sys

load_dotenv()
TOKEN = os.getenv('DISCORD_TOKEN')

if not TOKEN:
    print("‚ùå ERREUR : Token non trouv√©. V√©rifie ton fichier .env !")
    sys.exit(1)

print(f"üîç Token charg√© (d√©but) : {TOKEN[:10]}...")

intents = discord.Intents.default()
intents.message_content = True

bot = commands.Bot(command_prefix="!", intents=intents)

async def handle_ticket_embed(message):
    embed = message.embeds[0]  # On prend le premier embed

    # R√©cup√©rer le titre (ex: "Nouveau ticket : Blanchiment d'argent")
    title = embed.title or "Ticket sans titre"

    # Extraire les champs (Nom complet, Disponibilit√©, D√©tails...)
    fields = {}
    for field in embed.fields:
        fields[field.name] = field.value

    # R√©cup√©rer le nom complet (si pr√©sent)
    full_name = fields.get("Nom complet", "Inconnu")

    # R√©cup√©rer le pseudo Discord (si pr√©sent)
    discord_tag = fields.get("Discord", "Non sp√©cifi√©")

    # R√©cup√©rer la disponibilit√©
    availability = fields.get("Disponibilit√©", "Non sp√©cifi√©e")

    # R√©cup√©rer les d√©tails
    details = fields.get("D√©tails", "Aucun d√©tail fourni.")

    # Cr√©er le nom du salon : ticket_pseudo_discord
    channel_name = f"ticket_{discord_tag.replace('#', '').replace(' ', '-').lower()}"

    # R√©cup√©rer le serveur
    guild = message.guild

    # D√©finir les permissions : visible seulement pour le staff + bot
    overwrites = {
        guild.default_role: discord.PermissionOverwrite(read_messages=False),
        guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True),
    }

    # Ajouter le r√¥le Staff (√† adapter selon ton serveur)
    staff_role = discord.utils.get(guild.roles, name="Staff")  # Change "Staff" par le nom r√©el de ton r√¥le
    if staff_role:
        overwrites[staff_role] = discord.PermissionOverwrite(read_messages=True, send_messages=True)

    try:
        # Cr√©er le salon
        channel = await guild.create_text_channel(channel_name, overwrites=overwrites)

        # Envoyer le message d'accueil
        await channel.send(
            f"üì© **Nouveau ticket**\n"
            f"**Utilisateur :** {full_name} ({discord_tag})\n"
            f"**Raison :** {title.split(': ')[-1] if ': ' in title else title}\n"
            f"**Disponibilit√© :** {availability}\n"
            f"**D√©tails :**\n{details}\n\n"
            f"üîî Un membre du <@&{staff_role.id}> va vous r√©pondre rapidement."
        )

        # Optionnel : envoyer un message dans le salon original pour confirmer
        await message.channel.send(f"‚úÖ Ticket cr√©√© : {channel.mention}")

    except Exception as e:
        await message.channel.send(f"‚ùå Erreur lors de la cr√©ation du ticket : {e}")

@bot.event
async def on_message(message):
    # Ignore les messages du bot lui-m√™me
    if message.author == bot.user:
        return

    # V√©rifie si le message vient de ZentysBot (ou un autre bot sp√©cifique)
    if message.author.name == "ZentysBot" and message.embeds:
        # On traite uniquement les messages avec embeds (comme sur ton screenshot)
        await handle_ticket_embed(message)

    # Ne pas oublier de traiter les commandes !
    await bot.process_commands(message)

@bot.event
async def on_ready():
    print(f"‚úÖ {bot.user} est en ligne !")

@bot.command()
async def ping(ctx):
    await ctx.send("üèì Pong !")

try:
    bot.run(TOKEN)
except discord.LoginFailure:
    print("‚ùå ERREUR : Token invalide. V√©rifie qu‚Äôil est correct et non expir√©.")
except Exception as e:
    print(f"üí• Erreur inattendue : {e}")